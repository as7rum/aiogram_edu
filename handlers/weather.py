import requests
import datetime
from config import open_weather_token
from messages import weather_start_message
from aiogram.dispatcher.filters.text import Text
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Router, types

from keyboards.simple_row import make_row_keyboard

cancle_weather_state_botton = ['–Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É']

router = Router()

class GetingWeather(StatesGroup):
    getting_weather = State()

@router.message(Text(text="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É", text_ignore_case=True))
async def start_weather_script(message: Message, state: FSMContext):
    await message.answer(
        text= weather_start_message,
        reply_markup=make_row_keyboard(cancle_weather_state_botton)
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(GetingWeather.getting_weather)

@router.message(GetingWeather.getting_weather)
async def get_weather(message: types.Message):

    code_to_smile = {
        'Clear': '–Ø—Å–Ω–æ \N{black sun with rays}',
        'Clouds': '–û–±–ª–∞—á–Ω–æ \N{sun behind cloud}',
        'Rain': '–î–æ–∂–¥—å \N{umbrella with rain drops}',
        'Drizzle': '–î–æ–∂–¥—å \N{umbrella with rain drops}',
        'Thunderstorm': '–ì—Ä–æ–∑–∞ \N{high voltage sign}',
        'Snow': '–°–Ω–µ–≥ \N{snowflake}',
        'Mist': '–¢—É–º–∞–Ω \N{foggy}',

}

    try:
        r = requests.get(
            f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric')
    
        data = r.json()

        city = data['name']

        weather_discription = data['weather'][0]['main']

        if weather_discription in code_to_smile:
            wd = code_to_smile[weather_discription]
        else:
            wd = '–õ—É—á—à–µ –≤—ã–≥–ª—è–Ω–∏ –∫–∞ –≤ –æ–∫–Ω–æ...'

        cur_weather = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']
        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        await message.reply(#f'___{datetime.datetime.now().strftime('%d')}___\n'
            f'–ü–æ–≥–æ–¥–∞ –≤ {city}:\n\n {wd}\n\nüå°  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞\n\n'
            f'üíß  –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\n‚öóÔ∏è  –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n\nüå¨  –í–µ—Ç–µ—Ä: {wind} –º/—Å\n\n'
            f'üåÑ  –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåá  –ó–∞—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n'
            f'üåè  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n'
            f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ú®')


    except Exception as ex:
        await message.reply('\N{heavy exclamation mark symbol} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \N{heavy exclamation mark symbol}')